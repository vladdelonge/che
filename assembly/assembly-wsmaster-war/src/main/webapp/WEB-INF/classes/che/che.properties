#
# Copyright (c) 2012-2018 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#
# Contributors:
#   Red Hat, Inc. - initial API and implementation
#

### Che server

# Folder where Che stores internal data objects.
che.database=${che.home}/storage

# API service. Browsers initiate REST communications to Che server with this URL.
che.api=http://${CHE_HOST}:${CHE_PORT}/api

# API service internal network url. Back-end services should initiate REST communications to Che server with this URL
che.api.internal=http://${CHE_HOST}:${CHE_PORT}/api

# Che websocket major endpoint. Provides basic communication endpoint
# for major websocket interactions and messaging.
che.websocket.endpoint=ws://${CHE_HOST}:${CHE_PORT}/api/websocket


# Your projects are synchronized from the Che server into the machine running each
# workspace. This is the directory in the machine where your projects are placed.
che.workspace.projects.storage=/projects

# Used when Kubernetes or OpenShift-type components in a devfile request project PVC creation
# (Applied in case of 'unique' and 'per workspace' PVC strategy. In case of the 'common' PVC strategy,
# it is rewritten with the value of the `che.infra.kubernetes.pvc.quantity` property.)
che.workspace.projects.storage.default.size=1Gi

# Defines the directory inside the machine where all the workspace logs are placed.
# Provide this value into the machine, for example, as an environment variable.
# This is to ensure that agent developers can use this directory to back up agent logs.
che.workspace.logs.root_dir=/workspace_logs

# Configures proxies used by runtimes powering workspaces.
che.workspace.http_proxy=
che.workspace.https_proxy=
che.workspace.no_proxy=

# By default, when users access a workspace with its URL, the workspace
# automatically starts (if currently stopped). Set this to `false` to disable this behavior.
che.workspace.auto_start=true

# Workspace threads pool configuration. This pool is used for workspace-related
# operations that require asynchronous execution, for example, starting and stopping.
# Possible values are `fixed` and `cached`.
che.workspace.pool.type=fixed

# This property is ignored when pool type is different from `fixed`.
# It configures the exact size of the pool. When set, the `multiplier` property is ignored.
# If this property is not set (`0`, `<0`, `NULL`), then the pool size equals the number of cores.
# See also `che.workspace.pool.cores_multiplier`.
che.workspace.pool.exact_size=30

# This property is ignored when pool type is not set to `fixed`, `che.workspace.pool.exact_size`
# is set. When set, the pool size is `N_CORES * multiplier`.
che.workspace.pool.cores_multiplier=2

# This property specifies how many threads to use for workspace server liveness probes.
che.workspace.probe_pool_size=10


# HTTP proxy setting for workspace JVM.
che.workspace.http_proxy_java_options=NULL

# Java command-line options added to JVMs running in workspaces.
che.workspace.java_options=-XX:MaxRAM=150m -XX:MaxRAMFraction=2 -XX:+UseParallelGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xms20m -Djava.security.egd=file:/dev/./urandom

# Maven command-line options added to JVMs running agents in workspaces.
che.workspace.maven_options=-XX:MaxRAM=150m -XX:MaxRAMFraction=2 -XX:+UseParallelGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xms20m -Djava.security.egd=file:/dev/./urandom

# RAM limit default for each machine that has no RAM settings in its environment.
# Value less or equal to 0 is interpreted as disabling the limit.
che.workspace.default_memory_limit_mb=1024

# RAM request for each container that has no explicit RAM settings in its environment.
# This amount is allocated when the workspace container is created.
# This property may not be supported by all infrastructure implementations.
# Currently it is supported by Kubernetes and OpenShift.
# A memory request exceeding the memory limit is ignored, and only the limit size is used.
# Value less or equal to 0 is interpreted as disabling the limit.
che.workspace.default_memory_request_mb=200

# CPU limit for each container that has no CPU settings in its environment.
# Specify either in floating point cores number, for example, `0.125`,
# or using the Kubernetes format, integer millicores, for example, `125m`.
# Value less or equal to 0 is interpreted as disabling the limit.
che.workspace.default_cpu_limit_cores=-1

# CPU request for each container that has no CPU settings in environment.
# A CPU request exceeding the CPU limit is ignored, and only limit number is used.
# Value less or equal to 0 is interpreted as disabling the limit.
che.workspace.default_cpu_request_cores=-1

# RAM limit and request for each sidecar that has no RAM settings in the {prod-short} plug-in configuration.
# Value less or equal to 0 is interpreted as disabling the limit.
che.workspace.sidecar.default_memory_limit_mb=128
che.workspace.sidecar.default_memory_request_mb=64

# CPU limit and request default for each sidecar that has no CPU settings in the {prod-short} plug-in configuration.
# Specify either in floating point cores number, for example, `0.125`,
# or using the Kubernetes format, integer millicores, for example, `125m`.
# Value less or equal to 0 is interpreted as disabling the limit.
che.workspace.sidecar.default_cpu_limit_cores=-1
che.workspace.sidecar.default_cpu_request_cores=-1

# Defines image-pulling strategy for sidecars. Possible values are: `Always`,
# `Never`, `IfNotPresent`. For any other value, `Always` is assumed for images
# with the `:latest` tag, or `IfNotPresent` for all other cases.
che.workspace.sidecar.image_pull_policy=Always


# Period of inactive workspaces suspend job execution.
che.workspace.activity_check_scheduler_period_s=60

# The period of the cleanup of the activity table. The activity table can contain invalid or stale data
# if some unforeseen errors happen, like a server crash at a peculiar point in time. The default is to
# run the cleanup job every hour.
che.workspace.activity_cleanup_scheduler_period_s=3600

# The delay after server startup to start the first activity clean up job.
che.workspace.activity_cleanup_scheduler_initial_delay_s=60


# Delay before first workspace idleness check job started to avoid
# mass suspend if ws master was unavailable for period close to
# inactivity timeout.
che.workspace.activity_check_scheduler_delay_s=180

# Period of stopped temporary workspaces cleanup job execution.
che.workspace.cleanup_temporary_initial_delay_min=5
che.workspace.cleanup_temporary_period_min=180

# Number of sequential successful pings to server after which it is treated as available.
# Note: the property is common for all servers e.g. workspace agent, terminal, exec etc.
che.workspace.server.ping_success_threshold=1

# Interval, in milliseconds, between successive pings to workspace server.
che.workspace.server.ping_interval_milliseconds=3000

# List of servers names which require liveness probes
che.workspace.server.liveness_probes=wsagent/http,exec-agent/http,terminal,theia,jupyter,dirigible,cloud-shell,intellij

# Limit size of the logs collected from single container that can be observed by che-server when
# debugging workspace startup.
# default 10MB=10485760
che.workspace.startup_debug_log_limit_bytes=10485760

# If true, 'stop-workspace' role with the edit privileges will be granted to the 'che' ServiceAccount if OpenShift OAuth is enabled.
# This configuration is mainly required for workspace idling when the OpenShift OAuth is enabled.
che.workspace.stop.role.enabled=true

### Authentication parameters

# Che has a single identity implementation, so this does not change the user experience.
# If true, enables user creation at API level
che.auth.user_self_creation=false

# Authentication error page address
che.auth.access_denied_error_page=/error-oauth

# Reserved user names
che.auth.reserved_user_names=

# You can setup GitHub OAuth to automate authentication to remote repositories.
# You need to first register this application with GitHub OAuth.
che.oauth.github.clientid=NULL
che.oauth.github.clientsecret=NULL
che.oauth.github.authuri= https://github.com/login/oauth/authorize
che.oauth.github.tokenuri= https://github.com/login/oauth/access_token
che.oauth.github.redirecturis= http://localhost:${CHE_PORT}/api/oauth/callback

# Configuration of OpenShift OAuth client. Used to obtain OpenShift OAuth token.
che.oauth.openshift.clientid=NULL
che.oauth.openshift.clientsecret=NULL
che.oauth.openshift.oauth_endpoint= NULL
che.oauth.openshift.verify_token_url= NULL

# Configuration of Bitbucket Server OAuth1 client. Used to obtain Personal access tokens.
# Location of the file with Bitbucket Server application consumer key (equivalent to a username).
che.oauth1.bitbucket.consumerkeypath=NULL
# Location of the file with Bitbucket Server application private key
che.oauth1.bitbucket.privatekeypath=NULL
# Bitbucket Server URL. To work correctly with factories the same URL
# has to be part of `che.integration.bitbucket.server_endpoints` too.
che.oauth1.bitbucket.endpoint=NULL


### Internal

# Che extensions can be scheduled executions on a time basis.
# This configures the size of the thread pool allocated to extensions that are launched on
# a recurring schedule.
schedule.core_pool_size=10

# DB initialization and migration configuration
db.schema.flyway.baseline.enabled=true
db.schema.flyway.baseline.version=5.0.0.8.1
db.schema.flyway.scripts.prefix=
db.schema.flyway.scripts.suffix=.sql
db.schema.flyway.scripts.version_separator=__
db.schema.flyway.scripts.locations=classpath:che-schema

### Kubernetes Infra parameters

# Configuration of Kubernetes client that Infra will use
che.infra.kubernetes.master_url=
che.infra.kubernetes.trust_certs=

# Defines the way how servers are exposed to the world in k8s infra.
# List of strategies implemented in Che: default-host, multi-host, single-host
che.infra.kubernetes.server_strategy=multi-host

# Defines the way in which the workspace plugins and editors are exposed in the single-host mode.
# Supported exposures:
# - 'native': Exposes servers using k8s Ingresses. Works only on Kubernetes.
# - 'gateway': Exposes servers using reverse-proxy gateway.
che.infra.kubernetes.singlehost.workspace.exposure=native

# Defines the way how to expose devfile endpoints, thus end-user's applications, in single-host server strategy.
# They can either follow the single-host strategy and be exposed on subpaths, or they can be exposed on subdomains.
# - 'multi-host': expose on subdomains
# - 'single-host': expose on subpaths
che.infra.kubernetes.singlehost.workspace.devfile_endpoint_exposure=multi-host

# Defines labels which will be set to ConfigMaps configuring single-host gateway.
che.infra.kubernetes.singlehost.gateway.configmap_labels=app=che,component=che-gateway-config

# Used to generate domain for a server in a workspace in case property `che.infra.kubernetes.server_strategy` is set to `multi-host`
che.infra.kubernetes.ingress.domain=

# DEPRECATED - please do not change the value of this property otherwise the existing workspaces will loose data. Do not
# set it on new installations.
#
# Defines Kubernetes namespace in which all workspaces will be created.
# If not set, every workspace will be created in a new namespace, where namespace = workspace id
# It's possible to use <username> and <userid> placeholders (e.g.: che-workspace-<username>).
# In that case, new namespace will be created for each user. Service account with permission
# to create new namespace must be used.
#
# Ignored for OpenShift infra. Use `che.infra.openshift.project` instead
#
# If the namespace pointed to by this property exists, it will be used for all workspaces. If it does not exist,
# the namespace specified by the che.infra.kubernetes.namespace.default will be created and used.
che.infra.kubernetes.namespace=

# Indicates whether Che server is allowed to create namespaces/projects for user
# workspaces, or they're intended to be created manually by cluster administrator.
# This property is also used by the OpenShift infra.
che.infra.kubernetes.namespace.creation_allowed=true

# Defines Kubernetes default namespace in which user's workspaces are created
# if user does not override it.
# It's possible to use <username>, <userid> and <workspaceid> placeholders (e.g.: che-workspace-<username>).
# In that case, new namespace will be created for each user (or workspace).
# Is used by OpenShift infra as well to specify Project
che.infra.kubernetes.namespace.default=<username>-che

# Defines whether che-server should try to label the workspace namespaces.
che.infra.kubernetes.namespace.label=true

# List of labels to find Namespaces/Projects that are used for Che Workspaces.
# They are used to:
#  - find prepared Namespaces/Projects for users in combination with `che.infra.kubernetes.namespace.annotations`.
#  - actively label namespaces with any workspace.
che.infra.kubernetes.namespace.labels=app.kubernetes.io/part-of=che.eclipse.org,app.kubernetes.io/component=workspaces-namespace

# List of annotations to find Namespaces/Projects prepared for Che users workspaces.
# Only Namespaces/Projects matching the `che.infra.kubernetes.namespace.labels` will be matched against these annotations.
# Namespaces/Projects that matches both `che.infra.kubernetes.namespace.labels` and `che.infra.kubernetes.namespace.annotations`
# will be preferentially used for User's workspaces.
# It's possible to use `<username>` placeholder to specify the Namespace/Project to concrete user.
che.infra.kubernetes.namespace.annotations=che.eclipse.org/username=<username>

# Defines if a user is able to specify Kubernetes namespace (or OpenShift project) different from the default.
# It's NOT RECOMMENDED to configured true without OAuth configured. This property is also used by the OpenShift infra.
che.infra.kubernetes.namespace.allow_user_defined=false

# Defines Kubernetes Service Account name which should be specified to be bound to all workspaces pods.
# Note that Kubernetes Infrastructure won't create the service account and it should exist.
# OpenShift infrastructure will check if project is predefined(if `che.infra.openshift.project` is not empty):
#  - if it is predefined then service account must exist there
#  - if it is 'NULL' or empty string then infrastructure will create new OpenShift project per workspace
#    and prepare workspace service account with needed roles there
che.infra.kubernetes.service_account_name=NULL

# Specifies optional, additional cluster roles to use with the workspace service account.
# Note that the cluster role names must already exist, and the Che service account needs to be able to create a Role Binding
# to associate these cluster roles with the workspace service account. The names are comma separated.
# This property deprecates 'che.infra.kubernetes.cluster_role_name'.
che.infra.kubernetes.workspace_sa_cluster_roles=NULL

# Defines time frame that limits the Kubernetes workspace start time
che.infra.kubernetes.workspace_start_timeout_min=8

# Defines the timeout in minutes that limits the period for which Kubernetes Ingress become ready
che.infra.kubernetes.ingress_start_timeout_min=5

# If during workspace startup an unrecoverable event defined in the property occurs,
# terminate workspace immediately instead of waiting until timeout
# Note that this SHOULD NOT include a mere "Failed" reason, because that might catch events that are not unrecoverable.
# A failed container startup is handled explicitly by Che server.
che.infra.kubernetes.workspace_unrecoverable_events=FailedMount,FailedScheduling,MountVolume.SetUp failed,Failed to pull image,FailedCreate,ReplicaSetCreateError

# Defines whether use the Persistent Volume Claim for che workspace needs
# e.g backup projects, logs etc or disable it.
che.infra.kubernetes.pvc.enabled=true

# Defined which strategy will be used while choosing PVC for workspaces.
#
# Supported strategies:
# - 'common'
#        All workspaces in the same Kubernetes Namespace will reuse the same PVC.
#        Name of PVC may be configured with 'che.infra.kubernetes.pvc.name'.
#        Existing PVC will be used or new one will be created if it doesn't exist.
#
# - 'unique'
#        Separate PVC for each workspace's volume will be used.
#        Name of PVC is evaluated as '{che.infra.kubernetes.pvc.name} + '-' + {generated_8_chars}'.
#        Existing PVC will be used or a new one will be created if it doesn't exist.
#
# - 'per-workspace'
#        Separate PVC for each workspace will be used.
#        Name of PVC is evaluated as '{che.infra.kubernetes.pvc.name} + '-' + {WORKSPACE_ID}'.
#        Existing PVC will be used or a new one will be created if it doesn't exist.
che.infra.kubernetes.pvc.strategy=common

# Defines whether to run a job that creates workspace's subpath directories in persistent volume for the 'common' strategy before launching a workspace.
# Necessary in some versions of OpenShift/Kubernetes as workspace subpath volume mounts are created with root permissions,
# and thus cannot be modified by workspaces running as a user (presents an error importing projects into a workspace in Che).
# The default is "true", but should be set to false if the version of Openshift/Kubernetes creates subdirectories with user permissions.
# Relevant issue: https://github.com/kubernetes/kubernetes/issues/41638
# Note that this property has effect only if the 'common' PVC strategy used.
che.infra.kubernetes.pvc.precreate_subpaths=true

# Defines the settings of PVC name for che workspaces.
# Each PVC strategy supplies this value differently.
# See doc for che.infra.kubernetes.pvc.strategy property
che.infra.kubernetes.pvc.name=claim-che-workspace

# Defines the storage class of Persistent Volume Claim for the workspaces.
# Empty strings means "use default".
che.infra.kubernetes.pvc.storage_class_name=

# Defines the size of Persistent Volume Claim of che workspace.
# Format described here:
# https://docs.openshift.com/container-platform/latest/dev_guide/compute_resources.html#dev-compute-resources
che.infra.kubernetes.pvc.quantity=10Gi

# Pod that is launched when performing persistent volume claim maintenance jobs on OpenShift
che.infra.kubernetes.pvc.jobs.image=centos:centos7

# Image pull policy of container that used for the maintenance jobs on Kubernetes/OpenShift cluster
che.infra.kubernetes.pvc.jobs.image.pull_policy=IfNotPresent

# Defines pod memory limit for persistent volume claim maintenance jobs
che.infra.kubernetes.pvc.jobs.memorylimit=250Mi

# Defines Persistent Volume Claim access mode.
# Note that for common PVC strategy changing of access mode affects the number of simultaneously running workspaces.
# If OpenShift flavor where che running is using PVs with RWX access mode then a limit of running workspaces at the same time
# bounded only by che limits configuration like(RAM, CPU etc).
# Detailed information about access mode is described here:
# https://docs.openshift.com/container-platform/latest/architecture/additional_concepts/storage.html#pv-access-modes
che.infra.kubernetes.pvc.access_mode=ReadWriteOnce

# Defines whether Che Server should wait workspaces PVCs to become bound after creating.
# It's used by all PVC strategies.
#
# It should be set to `false` in case if `volumeBindingMode` is configured to `WaitForFirstConsumer`
# otherwise workspace starts will hangs up on phase of waiting PVCs.
#
# Default value is true (means that PVCs should be waited to be bound)
che.infra.kubernetes.pvc.wait_bound=true

# Defined range of ports for installers servers
#
# By default, installer will use own port, but if it conflicts with another installer servers
# then OpenShift infrastructure will reconfigure installer to use first available from this range
che.infra.kubernetes.installer_server_min_port=10000
che.infra.kubernetes.installer_server_max_port=20000

# Defines annotations for ingresses which are used for servers exposing. Value depends on the kind of ingress
# controller.
#
# OpenShift infrastructure ignores this property because it uses Routes instead of ingresses.
#
# Note that for a single-host deployment strategy to work, a controller supporting URL rewriting has to be
# used (so that URLs can point to different servers while the servers don't need to support changing the app root).
# The che.infra.kubernetes.ingress.path.rewrite_transform property defines how the path of the ingress should be
# transformed to support the URL rewriting and this property defines the set of annotations on the ingress itself
# that instruct the chosen ingress controller to actually do the URL rewriting, potentially building on the path
# transformation (if required by the chosen ingress controller).
#
# For example for nginx ingress controller 0.22.0 and later the following value is recommended:
# {"ingress.kubernetes.io/rewrite-target": "/$1","ingress.kubernetes.io/ssl-redirect": "false",\
#     "ingress.kubernetes.io/proxy-connect-timeout": "3600","ingress.kubernetes.io/proxy-read-timeout": "3600"}
# and the che.infra.kubernetes.ingress.path.rewrite_transform should be set to "%s(.*)"
#
# For nginx ingress controller older than 0.22.0, the rewrite-target should be set to merely "/" and the path transform
# to "%s" (see the the che.infra.kubernetes.ingress.path.rewrite_transform property).
#
# Please consult the nginx ingress controller documentation for the explanation of how the ingress controller uses
# the regular expression present in the ingress path and how it achieves the URL rewriting.
che.infra.kubernetes.ingress.annotations_json=NULL

# Defines a "recipe" on how to declare the path of the ingress that should expose a server.
# The "%s" represents the base public URL of the server and is guaranteed to end with a forward slash. This property
# must be a valid input to the String.format() method and contain exactly one reference to "%s".
#
# Please see the description of the che.infra.kubernetes.ingress.annotations_json property to see how these two
# properties interplay when specifying the ingress annotations and path.
#
# If not defined, this property defaults to "%s" (without the quotes) which means that the path is not transformed in
# any way for use with the ingress controller.
che.infra.kubernetes.ingress.path_transform=NULL

# Additional labels to add into every Ingress created by Che server
# to allow clear identification.
che.infra.kubernetes.ingress.labels=NULL

# Defines security context for pods that will be created by Kubernetes Infra
#
# This is ignored by OpenShift infra
che.infra.kubernetes.pod.security_context.run_as_user=NULL
che.infra.kubernetes.pod.security_context.fs_group=NULL

# Defines grace termination period for pods that will be created by Kubernetes / OpenShift infrastructures
#
# Grace termination period of Kubernetes / OpenShift workspace's pods defaults '0', which allows to terminate
# pods almost instantly and significantly decrease the time required for stopping a workspace.
# Note: if `terminationGracePeriodSeconds` have been explicitly set in Kubernetes / OpenShift recipe it will not be overridden.
che.infra.kubernetes.pod.termination_grace_period_sec=0

# Number of maximum concurrent async web requests
# (http requests or ongoing  web socket calls)
# supported in the underlying shared http client
# of the `KubernetesClient` instances.
# Default values are 64, and 5 per-host, which
# doesn't seem correct for multi-user scenarios
# knowing that Che keeps a number of connections
# opened (e.g. for command or ws-agent logs)
che.infra.kubernetes.client.http.async_requests.max=1000
che.infra.kubernetes.client.http.async_requests.max_per_host=1000

# Max number of idle connections in the connection pool
# of the Kubernetes-client shared http client
che.infra.kubernetes.client.http.connection_pool.max_idle=5

# Keep-alive timeout of the connection pool
# of the Kubernetes-client shared http client
# in minutes
che.infra.kubernetes.client.http.connection_pool.keep_alive_min=5

# Creates Ingresses with Transport Layer Security (TLS) enabled
# In OpenShift infrastructure, Routes will be TLS-enabled
che.infra.kubernetes.tls_enabled=false

# Name of a secret that should be used when creating workspace ingresses with TLS
# Ignored by OpenShift infrastructure
che.infra.kubernetes.tls_secret=

# Data for TLS Secret that should be used for workspaces Ingresses
# cert and key should be encoded with Base64 algorithm
# These properties are ignored by OpenShift infrastructure
che.infra.kubernetes.tls_key=NULL
che.infra.kubernetes.tls_cert=NULL

# Defines the period with which runtimes consistency checks will be performed.
# If runtime has inconsistent state then runtime will be stopped automatically.
# Value must be more than 0 or `-1`, where `-1` means that checks won't be performed at all.
#
# It is disabled by default because there is possible Che Server configuration when Che Server
# doesn't have an ability to interact with Kubernetes API when operation is not invoked by user.
#
# It DOES work on the following configurations:
# - workspaces objects are created in the same namespace where Che Server is located;
# - cluster-admin service account token is mount to Che Server pod;
#
# It DOES NOT work on the following configurations:
# - Che Server communicates with Kubernetes API using token from OAuth provider;
che.infra.kubernetes.runtimes_consistency_check_period_min=-1


# Name of cofig map in Che server namespace with additional CA TLS certificates to be propagated into all user's workspaces.
# If the property is set on OpenShift 4 infrastructure, and che.infra.openshift.trusted_ca.dest_configmap_labels includes
# config.openshift.io/inject-trusted-cabundle=true label, then cluster CA bundle will be propagated too.
che.infra.kubernetes.trusted_ca.src_configmap=NULL

# Name of configmap in a workspace namespace with additional CA TLS certificates.
# Holds the copy of che.infra.kubernetes.trusted_ca.src_configmap but in a workspace namespace.
# Content of this config map is mounted into all workspace containers including plugin brokers.
# Do not change the config map name unless it conflicts with the already existing config map.
# Note that the resulting config map name can be adjusted eventually to make it unique in k8s namespace.
# The original name would be stored in `che.original_name` label.

che.infra.kubernetes.trusted_ca.dest_configmap=ca-certs

# Configures path on workspace containers where the CA bundle should be mount.
# Content of config map specified by che.infra.kubernetes.trusted_ca.dest_configmap is mounted.
che.infra.kubernetes.trusted_ca.mount_path=/public-certs

# Comma separated list of labels to add to the CA certificates config map in user workspace.
# See che.infra.kubernetes.trusted_ca.dest_configmap property.
che.infra.kubernetes.trusted_ca.dest_configmap_labels=

### OpenShift Infra parameters

# Since OpenShift infrastructure reuse Kubernetes infrastructure components
# OpenShift infrastructure reuse most of the Kubernetes configuration attributes.

# DEPRECATED - please do not change the value of this property otherwise the existing workspaces will loose data. Do not
# set it on new installations.
#
# Defines OpenShift namespace in which all workspaces will be created.
# If not set, every workspace will be created in a new project, where project name = workspace id
# It's possible to use <username> and <userid> placeholders (e.g.: che-workspace-<username>).
# In that case, new project will be created for each user. OpenShift oauth or service account with
# permission to create new projects must be used.
#
# If the project pointed to by this property exists, it will be used for all workspaces. If it does not exist,
# the namespace specified by the che.infra.kubernetes.namespace.default will be created and used.
che.infra.openshift.project=

# Comma separated list of labels to add to the CA certificates config map in user workspace.
# See che.infra.kubernetes.trusted_ca.dest_configmap property.
# This default value is used for automatic cluster CA bundle injection in Openshift 4.
che.infra.openshift.trusted_ca.dest_configmap_labels=config.openshift.io/inject-trusted-cabundle=true

# Additional labels to add into every Route created by Che server
# to allow clear identification.
che.infra.openshift.route.labels=NULL

# The hostname that should be used as a suffix for the workspace routes.
# For example host=open.che.org then the route will look like routed3qrtk.open.che.org
# It has to be a valid DNS name.
che.infra.openshift.route.host.domain_suffix=NULL

### Experimental properties

# Next properties are subject to changes and removal, so do not rely on them in a stable Che assembly

# Docker image of Che plugin broker app that resolves workspace tooling configuration and copies
# plugins dependencies to a workspace
#
# Note these images are overridden by the Che Operator by default; changing the images here will not
# have an effect if Che is installed via Operator.
che.workspace.plugin_broker.metadata.image=quay.io/eclipse/che-plugin-metadata-broker:v3.4.0
che.workspace.plugin_broker.artifacts.image=quay.io/eclipse/che-plugin-artifacts-broker:v3.4.0

# Configures the default behavior of the plugin brokers when provisioning plugins into a workspace.
# If set to true, the plugin brokers will attempt to merge plugins when possible (i.e. they run in
# the same sidecar image and do not have conflicting settings). This value is the default setting
# used when the devfile does not specify otherwise, via the "mergePlugins" attribute.
che.workspace.plugin_broker.default_merge_plugins=false

# Docker image of Che plugin broker app that resolves workspace tooling configuration and copies
# plugins dependencies to a workspace
che.workspace.plugin_broker.pull_policy=Always

# Defines the timeout in minutes that limits the max period of result waiting for plugin broker.
che.workspace.plugin_broker.wait_timeout_min=3

# Workspace tooling plugins registry endpoint. Should be a valid HTTP URL.
# Example: http://che-plugin-registry-eclipse-che.192.168.65.2.nip.io
# In case Che plugins tooling is not needed value 'NULL' should be used
che.workspace.plugin_registry_url=https://che-plugin-registry.prod-preview.openshift.io/v3

# Workspace tooling plugins registry "internal" endpoint. Should be a valid HTTP URL.
# Example: http://devfile-registry.che.svc.cluster.local:8080
# In case Che plugins tooling is not needed value 'NULL' should be used
che.workspace.plugin_registry_internal_url=NULL

# Devfile Registry endpoint. Should be a valid HTTP URL.
# Example: http://che-devfile-registry-eclipse-che.192.168.65.2.nip.io
# In case Che plugins tooling is not needed value 'NULL' should be used
che.workspace.devfile_registry_url=https://che-devfile-registry.prod-preview.openshift.io/

# Devfile Registry "internal" endpoint. Should be a valid HTTP URL.
# Example: http://plugin-registry.che.svc.cluster.local:8080
# In case Che plugins tooling is not needed value 'NULL' should be used
che.workspace.devfile_registry_internal_url=NULL

# The configuration property that defines available values for storage types that clients like
# Dashboard should propose for users during workspace creation/update.
# Available values:
#   - 'persistent': Persistent Storage slow I/O but persistent.
#   - 'ephemeral': Ephemeral Storage allows for faster I/O but may have limited storage
#       and is not persistent.
#   - 'async': Experimental feature: Asynchronous storage is combination of Ephemeral
#       and Persistent storage. Allows for faster I/O and keep your changes, will backup on stop
#       and restore on start workspace.
#       Will work only if:
#           - che.infra.kubernetes.pvc.strategy='common'
#           - che.limits.user.workspaces.run.count=1
#           - che.infra.kubernetes.namespace.allow_user_defined=false
#           - che.infra.kubernetes.namespace.default contains <username>
#      in other cases remove 'async' from the list.
che.workspace.storage.available_types=persistent,ephemeral,async

# The configuration property that defines a default value for storage type that clients like
# Dashboard should propose for users during workspace creation/update.
# The 'async' value not recommended as default type since it's experimental
che.workspace.storage.preferred_type=persistent

# Configures in which way secure servers will be protected with authentication.
# Suitable values:
#   - 'default': jwtproxy is configured in a pass-through mode.
#       So, servers should authenticate requests themselves.
#   - 'jwtproxy': jwtproxy will authenticate requests.
#       So, servers will receive only authenticated ones.
che.server.secure_exposer=jwtproxy

# Jwtproxy issuer string, token lifetime and optional auth page path to route unsigned requests to.
che.server.secure_exposer.jwtproxy.token.issuer=wsmaster
che.server.secure_exposer.jwtproxy.token.ttl=8800h
che.server.secure_exposer.jwtproxy.auth.loader.path=/_app/loader.html
che.server.secure_exposer.jwtproxy.image=quay.io/eclipse/che-jwtproxy:0.10.0
che.server.secure_exposer.jwtproxy.memory_request=15mb
che.server.secure_exposer.jwtproxy.memory_limit=128mb
che.server.secure_exposer.jwtproxy.cpu_request=0.03
che.server.secure_exposer.jwtproxy.cpu_limit=0.5

### Configuration of major "/websocket" endpoint

# Maximum size of the JSON RPC processing pool
# in case if pool size would be exceeded message execution will be rejected
che.core.jsonrpc.processor_max_pool_size=50

# Initial json processing pool. Minimum number of threads that used to process major JSON RPC messages.
che.core.jsonrpc.processor_core_pool_size=5

# Configuration of queue used to process Json RPC messages.
che.core.jsonrpc.processor_queue_capacity=100000


# Port the the http server endpoint that would be exposed with Prometheus metrics
che.metrics.port=8087

### CORS settings

# CORS filter on WS Master is turned off by default.
# Use environment variable "CHE_CORS_ENABLED=true" to turn it on
# "cors.allowed.origins" indicates which request origins are allowed
che.cors.allowed_origins=*

# "cors.support.credentials" indicates if it allows processing of requests with credentials
# (in cookies, headers, TLS client certificates)
che.cors.allow_credentials=false

### Factory defaults

# Editor and plugin which will be used for factories which are created from remote git repository
# which doesn't contain any Che-specific workspace descriptor
# Multiple plugins must be comma-separated, for example:
# pluginFooPublisher/pluginFooName/pluginFooVersion,pluginBarPublisher/pluginBarName/pluginBarVersion
che.factory.default_editor=eclipse/che-theia/latest
che.factory.default_plugins=eclipse/che-machine-exec-plugin/latest

# Devfile filenames to look on repository-based factories (like GitHub etc).
# Factory will try to locate those files in the order they enumerated in the property.
che.factory.default_devfile_filenames=devfile.yaml,.devfile.yaml

### Devfile defaults

# Default Editor that should be provisioned into Devfile if there is no specified Editor
# Format is `editorPublisher/editorName/editorVersion` value.
# `NULL` or absence of value means that default editor should not be provisioned.
che.workspace.devfile.default_editor=eclipse/che-theia/latest

# Default Plugins which should be provisioned for Default Editor.
# All the plugins from this list that are not explicitly mentioned in the user-defined devfile
# will be provisioned but only when the default editor is used or if the user-defined editor is
# the same as the default one (even if in different version).
# Format is comma-separated `pluginPublisher/pluginName/pluginVersion` values, and URLs. For example:
# eclipse/che-theia-exec-plugin/0.0.1,eclipse/che-theia-terminal-plugin/0.0.1,https://cdn.pluginregistry.com/vi-mode/meta.yaml
# If the plugin is a URL, the plugin's meta.yaml is retrieved from that URL.
che.workspace.devfile.default_editor.plugins=eclipse/che-machine-exec-plugin/latest

# Defines comma-separated list of labels for selecting secrets from a user namespace,
# which will be mount into workspace containers as a files or env variables.
# Only secrets that match ALL given labels will be selected.
che.workspace.provision.secret.labels=app.kubernetes.io/part-of=che.eclipse.org,app.kubernetes.io/component=workspace-secret

# Plugin is added in case async storage feature will be enabled in workspace config
# and supported by environment
che.workspace.devfile.async.storage.plugin=eclipse/che-async-pv-plugin/latest

# Docker image for the Che async storage
che.infra.kubernetes.async.storage.image=quay.io/eclipse/che-workspace-data-sync-storage:0.0.1

# Optionally configures node selector for workspace pod. Format is comma-separated
# key=value pairs, e.g:  disktype=ssd,cpu=xlarge,foo=bar
che.workspace.pod.node_selector=NULL

# Optionally configures tolerations for workspace pod. Format is a string representing a JSON Array of taint tolerations, 
# or `NULL` to disable it. The objects contained in the array have to follow this 
# link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#toleration-v1-core[spec]. 
# Example: [{"effect":"NoExecute","key":"aNodeTaint","operator":"Equal","value":"aValue"}]
che.workspace.pod.tolerations_json=NULL

# The timeout for the Asynchronous Storage Pod shutdown after stopping the last used workspace.
# Value less or equal to 0 interpreted as disabling shutdown ability.
che.infra.kubernetes.async.storage.shutdown_timeout_min=120

# Defines the period with which the Asynchronous Storage Pod stopping ability will be performed (once in 30 minutes by default)
che.infra.kubernetes.async.storage.shutdown_check_period_min=30

# Bitbucket endpoints used for factory integrations.
# Comma separated list of bitbucket server URLs or NULL if no integration expected.
che.integration.bitbucket.server_endpoints=NULL
